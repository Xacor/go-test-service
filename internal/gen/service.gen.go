// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// CreateGood defines model for create_good.
type CreateGood struct {
	Name string `json:"name" validate:"required"`
}

// CreateGoodResponseData defines model for create_good_response_data.
type CreateGoodResponseData struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *int       `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Priority    *int       `json:"priority,omitempty"`
	ProjectId   *int       `json:"project_id,omitempty"`
	Removed     *bool      `json:"removed,omitempty"`
}

// Error Подробная информация о возникшей ошибке
type Error struct {
	Code    int     `json:"code"`
	Details *string `json:"details,omitempty"`
	Message string  `json:"message"`
}

// ErrorResponseData defines model for error_response_data.
type ErrorResponseData struct {
	// Error Подробная информация о возникшей ошибке
	Error Error `json:"error"`
}

// GetGoodResponseData defines model for get_good_response_data.
type GetGoodResponseData struct {
	Goods *[]Good   `json:"goods,omitempty"`
	Meta  *MetaData `json:"meta,omitempty"`
}

// Good defines model for good.
type Good struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *int       `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Priority    *int       `json:"priority,omitempty"`
	ProjectId   *int       `json:"project_id,omitempty"`
	Removed     *bool      `json:"removed,omitempty"`
}

// MetaData defines model for meta_data.
type MetaData struct {
	Limit   *int `json:"limit,omitempty"`
	Offset  *int `json:"offset,omitempty"`
	Removed *int `json:"removed,omitempty"`
	Total   *int `json:"total,omitempty"`
}

// RemoveGoodResponseData defines model for remove_good_response_data.
type RemoveGoodResponseData struct {
	Id        *int  `json:"id,omitempty"`
	ProjectId *int  `json:"project_id,omitempty"`
	Removed   *bool `json:"removed,omitempty"`
}

// ReprioritizeGoodResponseData defines model for reprioritize_good_response_data.
type ReprioritizeGoodResponseData = []struct {
	Id       *int `json:"id,omitempty"`
	Priority *int `json:"priority,omitempty" validate:"required"`
}

// UpdateGood defines model for update_good.
type UpdateGood struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name" validate:"required"`
}

// UpdateGoodResponseData defines model for update_good_response_data.
type UpdateGoodResponseData struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *int       `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Priority    *int       `json:"priority,omitempty"`
	ProjectId   *int       `json:"project_id,omitempty"`
	Removed     *bool      `json:"removed,omitempty"`
}

// PostGoodCreateParams defines parameters for PostGoodCreate.
type PostGoodCreateParams struct {
	ProjectId int `form:"projectId" json:"projectId"`
}

// GetGoodListParams defines parameters for GetGoodList.
type GetGoodListParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// DeleteGoodRemoveParams defines parameters for DeleteGoodRemove.
type DeleteGoodRemoveParams struct {
	Id        int `form:"id" json:"id"`
	ProjectId int `form:"projectId" json:"projectId"`
}

// PatchGoodReprioritizeJSONBody defines parameters for PatchGoodReprioritize.
type PatchGoodReprioritizeJSONBody struct {
	NewPriority int `json:"newPriority"`
}

// PatchGoodReprioritizeParams defines parameters for PatchGoodReprioritize.
type PatchGoodReprioritizeParams struct {
	Id        int `form:"id" json:"id"`
	ProjectId int `form:"projectId" json:"projectId"`
}

// PatchGoodUpdateParams defines parameters for PatchGoodUpdate.
type PatchGoodUpdateParams struct {
	Id        int `form:"id" json:"id"`
	ProjectId int `form:"projectId" json:"projectId"`
}

// PostGoodCreateJSONRequestBody defines body for PostGoodCreate for application/json ContentType.
type PostGoodCreateJSONRequestBody = CreateGood

// PatchGoodReprioritizeJSONRequestBody defines body for PatchGoodReprioritize for application/json ContentType.
type PatchGoodReprioritizeJSONRequestBody PatchGoodReprioritizeJSONBody

// PatchGoodUpdateJSONRequestBody defines body for PatchGoodUpdate for application/json ContentType.
type PatchGoodUpdateJSONRequestBody = UpdateGood

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создание товара
	// (POST /good/create)
	PostGoodCreate(ctx echo.Context, params PostGoodCreateParams) error
	// Получение списка товаров
	// (GET /good/list)
	GetGoodList(ctx echo.Context, params GetGoodListParams) error
	// Удаление товара
	// (DELETE /good/remove)
	DeleteGoodRemove(ctx echo.Context, params DeleteGoodRemoveParams) error
	// Обновление приоритета товара
	// (PATCH /good/reprioritize)
	PatchGoodReprioritize(ctx echo.Context, params PatchGoodReprioritizeParams) error
	// Обновление товара
	// (PATCH /good/update)
	PatchGoodUpdate(ctx echo.Context, params PatchGoodUpdateParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostGoodCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostGoodCreate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGoodCreateParams
	// ------------- Required query parameter "projectId" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectId", ctx.QueryParams(), &params.ProjectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGoodCreate(ctx, params)
	return err
}

// GetGoodList converts echo context to params.
func (w *ServerInterfaceWrapper) GetGoodList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGoodListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGoodList(ctx, params)
	return err
}

// DeleteGoodRemove converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGoodRemove(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteGoodRemoveParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Required query parameter "projectId" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectId", ctx.QueryParams(), &params.ProjectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteGoodRemove(ctx, params)
	return err
}

// PatchGoodReprioritize converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGoodReprioritize(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchGoodReprioritizeParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Required query parameter "projectId" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectId", ctx.QueryParams(), &params.ProjectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchGoodReprioritize(ctx, params)
	return err
}

// PatchGoodUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGoodUpdate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchGoodUpdateParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Required query parameter "projectId" -------------

	err = runtime.BindQueryParameter("form", true, true, "projectId", ctx.QueryParams(), &params.ProjectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchGoodUpdate(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/good/create", wrapper.PostGoodCreate)
	router.GET(baseURL+"/good/list", wrapper.GetGoodList)
	router.DELETE(baseURL+"/good/remove", wrapper.DeleteGoodRemove)
	router.PATCH(baseURL+"/good/reprioritize", wrapper.PatchGoodReprioritize)
	router.PATCH(baseURL+"/good/update", wrapper.PatchGoodUpdate)

}
